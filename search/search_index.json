{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"Introduction","text":"<p>The RPG++ Engine is an experimental engine for 2D RPG games.</p>"},{"location":"#dependencies","title":"Dependencies","text":"<ul> <li>raylib</li> <li>nlohmann/json</li> <li>nativefiledialog-extended</li> <li>raygui</li> <li>alpaca</li> <li>sol2</li> <li>reproc</li> </ul>"},{"location":"#sections","title":"Sections","text":"<ul> <li>C++ API</li> </ul>"},{"location":"C%2B%2B%20API/","title":"RPG++ Library","text":"<p>A C++ Library for building RPG games with the power of raylib.</p>"},{"location":"C%2B%2B%20API/#types","title":"Types","text":"Name Description Tile A tile that may be placed in the world. Room This class represents a game's room. AtlasTile Represents a source atlas tile from a TileSet. TileMap A TileMap represents a map of the placed tiles in a Room. Direction Direction enum, representing an animation state. Actor The Actor class represents an Actor in the game's world. TileSet The TileSet class represents a collection of tiles that can be used for a TileMap or another object  See :    TileMap"},{"location":"C%2B%2B%20API/Actor/","title":"Actor","text":"<p>class Actor</p> <p>The Actor class represents an Actor in the game's world.</p> See Direction"},{"location":"C%2B%2B%20API/Actor/#variables","title":"Variables","text":"Name Description tileSet The used TileSet for this Actor's sprites. tileSetSource The path to the TileSet file. tile The currently shown tile from the TileSet. position Current position in the world of this Actor. collisionRect Rectangle, representing the collision of this Actor. animations An array of the animations. currentAnimation A Direction enum, showing the current animation that is being played."},{"location":"C%2B%2B%20API/Actor/#functions","title":"Functions","text":"Name Description Actor Constructor that takes a path to the .ractor file. Actor Constructor that takes a TileSet, the atlas position of the tile to use, and the path to the TileSet. Actor Constructor that takes an ActorBin binary structure dumpJson Dump this Actor's data to a nlohmann::json object. unload Unload routine. update Update routine. draw Draw routine. getPosition Get this actor's position in the world. setPosition Set this Actor's position. getRect Get the bounding box of this Actor. getTileSet Get a reference to this Actor's TileSet. setTileSet Set this Actor's TileSet using a path to the tileset file. moveByVelocity Move the Actor using a velocity vector. getCollisionRect Get the collision rectangle of this Actor if it was moved by the velocity vector addAnimationFrame Add a frame in the chosen animation. removeAnimationFrame Remove a frame in the chosen animation, specified by an index. setAnimationFrame Change a frame in the chosen animation to another atlas tile from the TileSet. addAnimationFrames Add multiple frames to the chosen animation. changeAnimation Change the Actor's current animation and play it. getTileSetSource Get the path of the used TileSet. getAnimationsRaw Get an array of this Actor's animations getAnimationRaw Get a specific animation getCollisionRect Get the collision Rectangle of this Actor setCollisionRect Set the Actor's collision Rectangle"},{"location":"C%2B%2B%20API/Actor/#variable-details","title":"Variable Details","text":""},{"location":"C%2B%2B%20API/Actor/#animations","title":"animations","text":"<p>std::array&lt;std::unique_ptr&lt;std::vector&lt;Vector2&gt;&gt;, 8&gt; animations</p> <p>An array of the animations. Each std::vector represents the frames of an animation."},{"location":"C%2B%2B%20API/Actor/#collisionrect","title":"collisionRect","text":"<p>Rectangle collisionRect</p> <p>Rectangle, representing the collision of this Actor.</p>"},{"location":"C%2B%2B%20API/Actor/#currentanimation","title":"currentAnimation","text":"<p>Direction currentAnimation</p> <p>A Direction enum, showing the current animation that is being played.</p>"},{"location":"C%2B%2B%20API/Actor/#position","title":"position","text":"<p>Vector2 position</p> <p>Current position in the world of this Actor.</p>"},{"location":"C%2B%2B%20API/Actor/#tile","title":"tile","text":"<p>AtlasTile tile</p> <p>The currently shown tile from the TileSet.</p>"},{"location":"C%2B%2B%20API/Actor/#tileset","title":"tileSet","text":"<p>std::unique_ptr&lt;TileSet&gt; tileSet</p> <p>The used TileSet for this Actor's sprites.</p>"},{"location":"C%2B%2B%20API/Actor/#tilesetsource","title":"tileSetSource","text":"<p>std::string tileSetSource</p> <p>The path to the TileSet file.</p>"},{"location":"C%2B%2B%20API/Actor/#function-details","title":"Function Details","text":""},{"location":"C%2B%2B%20API/Actor/#actor_1","title":"Actor","text":"<p>Actor(std::string fileName)</p> <p>Constructor that takes a path to the .ractor file.</p> <p>Actor(std::unique_ptr&lt;TileSet&gt; tileSet, Vector2 atlasPos, std::string tileSetSource)</p> <p>Constructor that takes a TileSet, the atlas position of the tile to use, and the path to the TileSet.</p> <p>Actor(ActorBin bin)</p> <p>Constructor that takes an ActorBin binary structure</p>"},{"location":"C%2B%2B%20API/Actor/#addanimationframe","title":"addAnimationFrame","text":"<p>void addAnimationFrame(Direction id, Vector2 atlasPos)</p> <p>Add a frame in the chosen animation. The frame represents an atlas tile from this Actor's TileSet.</p>"},{"location":"C%2B%2B%20API/Actor/#addanimationframes","title":"addAnimationFrames","text":"<p>void addAnimationFrames(Direction id, std::vector&lt;std::vector&lt;int&gt;&gt; frames)</p> <p>Add multiple frames to the chosen animation.</p>"},{"location":"C%2B%2B%20API/Actor/#changeanimation","title":"changeAnimation","text":"<p>void changeAnimation(Direction id)</p> <p>Change the Actor's current animation and play it.</p>"},{"location":"C%2B%2B%20API/Actor/#draw","title":"draw","text":"<p>void draw()</p> <p>Draw routine.</p>"},{"location":"C%2B%2B%20API/Actor/#dumpjson","title":"dumpJson","text":"<p>json dumpJson()</p> <p>Dump this Actor's data to a nlohmann::json object.</p>"},{"location":"C%2B%2B%20API/Actor/#getanimationraw","title":"getAnimationRaw","text":"<p>std::vector&lt;Vector2&gt; getAnimationRaw(Direction id)</p> <p>Get a specific animation</p>"},{"location":"C%2B%2B%20API/Actor/#getanimationsraw","title":"getAnimationsRaw","text":"<p>std::array&lt;std::vector&lt;Vector2&gt;, 8&gt; getAnimationsRaw()</p> <p>Get an array of this Actor's animations</p>"},{"location":"C%2B%2B%20API/Actor/#getcollisionrect","title":"getCollisionRect","text":"<p>Rectangle getCollisionRect(Vector2 velocity)</p> <p>Get the collision rectangle of this Actor if it was moved by the velocity vector</p> <p>Rectangle getCollisionRect()</p> <p>Get the collision Rectangle of this Actor</p>"},{"location":"C%2B%2B%20API/Actor/#getposition","title":"getPosition","text":"<p>Vector2 getPosition()</p> <p>Get this actor's position in the world.</p>"},{"location":"C%2B%2B%20API/Actor/#getrect","title":"getRect","text":"<p>Rectangle getRect()</p> <p>Get the bounding box of this Actor.</p>"},{"location":"C%2B%2B%20API/Actor/#gettileset","title":"getTileSet","text":"<p>TileSet&amp; getTileSet()</p> <p>Get a reference to this Actor's TileSet.</p>"},{"location":"C%2B%2B%20API/Actor/#gettilesetsource","title":"getTileSetSource","text":"<p>std::string getTileSetSource()</p> <p>Get the path of the used TileSet.</p>"},{"location":"C%2B%2B%20API/Actor/#movebyvelocity","title":"moveByVelocity","text":"<p>void moveByVelocity(Vector2 velocity)</p> <p>Move the Actor using a velocity vector.</p>"},{"location":"C%2B%2B%20API/Actor/#removeanimationframe","title":"removeAnimationFrame","text":"<p>void removeAnimationFrame(Direction id, int frameIndex)</p> <p>Remove a frame in the chosen animation, specified by an index.</p>"},{"location":"C%2B%2B%20API/Actor/#setanimationframe","title":"setAnimationFrame","text":"<p>void setAnimationFrame(Direction id, int frameIndex, Vector2 atlasTile)</p> <p>Change a frame in the chosen animation to another atlas tile from the TileSet.</p>"},{"location":"C%2B%2B%20API/Actor/#setcollisionrect","title":"setCollisionRect","text":"<p>void setCollisionRect(Rectangle rect)</p> <p>Set the Actor's collision Rectangle</p>"},{"location":"C%2B%2B%20API/Actor/#setposition","title":"setPosition","text":"<p>void setPosition(Vector2 position)</p> <p>Set this Actor's position.</p>"},{"location":"C%2B%2B%20API/Actor/#settileset","title":"setTileSet","text":"<p>void setTileSet(std::string tileSetSource)</p> <p>Set this Actor's TileSet using a path to the tileset file.</p>"},{"location":"C%2B%2B%20API/Actor/#unload","title":"unload","text":"<p>void unload()</p> <p>Unload routine. The UnloadTexture function will called here.</p>"},{"location":"C%2B%2B%20API/Actor/#update","title":"update","text":"<p>void update()</p> <p>Update routine.</p>"},{"location":"C%2B%2B%20API/AtlasTile/","title":"AtlasTile","text":"<p>class AtlasTile</p> <p>Represents a source atlas tile from a TileSet.</p>"},{"location":"C%2B%2B%20API/AtlasTile/#variables","title":"Variables","text":"Name Description texture Pointer to the used Texture atlasCoords The atlas (source) coordinates from the TileSet."},{"location":"C%2B%2B%20API/AtlasTile/#functions","title":"Functions","text":"Name Description AtlasTile Empty constructor AtlasTile Constructor that takes in a texture and coordinates on the atlas (the tileset) getAtlasCoords Get the atlas coordinates  Return :    A Vector2 which represents the atlas coordinates"},{"location":"C%2B%2B%20API/AtlasTile/#variable-details","title":"Variable Details","text":""},{"location":"C%2B%2B%20API/AtlasTile/#atlascoords","title":"atlasCoords","text":"<p>Vector2 atlasCoords</p> <p>The atlas (source) coordinates from the TileSet.</p>"},{"location":"C%2B%2B%20API/AtlasTile/#texture","title":"texture","text":"<p>Texture *texture</p> <p>Pointer to the used Texture</p>"},{"location":"C%2B%2B%20API/AtlasTile/#function-details","title":"Function Details","text":""},{"location":"C%2B%2B%20API/AtlasTile/#atlastile_1","title":"AtlasTile","text":"<p>AtlasTile()</p> <p>Empty constructor</p> <p>AtlasTile(Texture *texture, Vector2 atlasCoords)</p> <p>Constructor that takes in a texture and coordinates on the atlas (the tileset)</p>"},{"location":"C%2B%2B%20API/AtlasTile/#getatlascoords","title":"getAtlasCoords","text":"<p>Vector2 getAtlasCoords()</p> <p>Get the atlas coordinates</p> Return A Vector2 which represents the atlas coordinates"},{"location":"C%2B%2B%20API/Direction/","title":"Direction","text":"<p>enum Direction</p> <p>Direction enum, representing an animation state.</p> RPGPP_DOWN_IDLE = 0 Down Idle state. RPGPP_DOWN = 1 Down state. RPGPP_UP_IDLE = 2 Up Idle state. RPGPP_UP = 3 Up state. RPGPP_LEFT_IDLE = 4 Left Idle state. RPGPP_LEFT = 5 Left state. RPGPP_RIGHT_IDLE = 6 Right Idle state. RPGPP_RIGHT = 7 Right state."},{"location":"C%2B%2B%20API/Room/","title":"Room","text":"<p>class Room</p> <p>This class represents a game's room. It can contain the Player, interactables, collisions and the TileMap</p>"},{"location":"C%2B%2B%20API/Room/#variables","title":"Variables","text":"Name Description interactables Container of the interactable tiles collisions Container of the collision tiles tileMap This Room's TileMap, which contains all placed tiles. actors A collection of all Actors in this Room player This Room's only Player."},{"location":"C%2B%2B%20API/Room/#functions","title":"Functions","text":"Name Description Room Empty constructor Room Construct a Room from an .rmap file Room Construct a Room by using a TileMap pointer Room Construct a Room by using the RoomBin binary structure  <code>bin</code> :    The binary structure to use dumpJson Dump the room's data into a nlohmann::json object for later use Useful for dumping into a .json file.  Return :    The JSON object unload Unload used resources. update Update routine for this Room. draw Draw routine for this Room. addActor Add an actor to this Room  <code>actor</code> :    The actor to be added to the Room's collection. addPlayer Add the Player into this Room. getPlayer Get a reference to the Player object. getTileMap Get a pointer to this Room's TileMap. getCollisions Get a reference to the CollisionsContainer of this Room. getInteractables Get a reference to the InteractablesContainer of this Room."},{"location":"C%2B%2B%20API/Room/#variable-details","title":"Variable Details","text":""},{"location":"C%2B%2B%20API/Room/#actors","title":"actors","text":"<p>std::unique_ptr&lt;std::vector&lt;Actor&gt;&gt; actors</p> <p>A collection of all Actors in this Room</p>"},{"location":"C%2B%2B%20API/Room/#collisions","title":"collisions","text":"<p>std::unique_ptr&lt;CollisionsContainer&gt; collisions</p> <p>Container of the collision tiles</p>"},{"location":"C%2B%2B%20API/Room/#interactables","title":"interactables","text":"<p>std::unique_ptr&lt;InteractablesContainer&gt; interactables</p> <p>Container of the interactable tiles</p>"},{"location":"C%2B%2B%20API/Room/#player","title":"player","text":"<p>std::unique_ptr&lt;Player&gt; player</p> <p>This Room's only Player.</p>"},{"location":"C%2B%2B%20API/Room/#tilemap","title":"tileMap","text":"<p>std::unique_ptr&lt;TileMap&gt; tileMap</p> <p>This Room's TileMap, which contains all placed tiles.</p>"},{"location":"C%2B%2B%20API/Room/#function-details","title":"Function Details","text":""},{"location":"C%2B%2B%20API/Room/#room_1","title":"Room","text":"<p>Room()</p> <p>Empty constructor</p> <p>Room(std::string fileName)</p> <p>Construct a Room from an .rmap file</p> <p>Room(std::unique_ptr&lt;TileMap&gt; tileMap)</p> <p>Construct a Room by using a TileMap pointer</p> <p>Room(RoomBin bin)</p> <p>Construct a Room by using the RoomBin binary structure</p> <code>bin</code> The binary structure to use"},{"location":"C%2B%2B%20API/Room/#addactor","title":"addActor","text":"<p>void addActor(Actor actor)</p> <pre><code>Add an actor to this Room\n</code></pre> <code>actor</code> The actor to be added to the Room's collection."},{"location":"C%2B%2B%20API/Room/#addplayer","title":"addPlayer","text":"<p>void addPlayer(std::unique_ptr&lt;Player&gt; player)</p> <pre><code>Add the Player into this Room. A unique_ptr is passed whose ownership will be moved into the Room.\n</code></pre> <code>player</code> A pointer to the player that will be moved into this Room."},{"location":"C%2B%2B%20API/Room/#draw","title":"draw","text":"<p>void draw()</p> <pre><code>Draw routine for this Room.\n</code></pre>"},{"location":"C%2B%2B%20API/Room/#dumpjson","title":"dumpJson","text":"<p>json dumpJson()</p> <pre><code>Dump the room's data into a nlohmann::json object for later use\nUseful for dumping into a .json file.\n</code></pre> Return The JSON object"},{"location":"C%2B%2B%20API/Room/#getcollisions","title":"getCollisions","text":"<p>CollisionsContainer&amp; getCollisions()</p> <pre><code>Get a reference to the CollisionsContainer of this Room.\n</code></pre>"},{"location":"C%2B%2B%20API/Room/#getinteractables","title":"getInteractables","text":"<p>InteractablesContainer&amp; getInteractables()</p> <pre><code>Get a reference to the InteractablesContainer of this Room.\n</code></pre>"},{"location":"C%2B%2B%20API/Room/#getplayer","title":"getPlayer","text":"<p>Player&amp; getPlayer()</p> <pre><code>Get a reference to the Player object.\n</code></pre> Return The Player in this Room."},{"location":"C%2B%2B%20API/Room/#gettilemap","title":"getTileMap","text":"<p>TileMap *getTileMap()</p> <pre><code>Get a pointer to this Room's TileMap.\n</code></pre> Return A pointer to the room's TileMap."},{"location":"C%2B%2B%20API/Room/#unload","title":"unload","text":"<p>void unload()</p> <pre><code>Unload used resources. Typically unloads used Textures by calling raylib's UnloadTexture\n</code></pre>"},{"location":"C%2B%2B%20API/Room/#update","title":"update","text":"<p>void update()</p> <pre><code>Update routine for this Room.\n</code></pre>"},{"location":"C%2B%2B%20API/Tile/","title":"Tile","text":"<p>class Tile</p> <p>A tile that may be placed in the world.</p>"},{"location":"C%2B%2B%20API/Tile/#variables","title":"Variables","text":"Name Description atlasTile The Tile's source AtlasTile. worldCoords The Tile's World coordinates. placed Whether this Tile is placed and will be drawn or not."},{"location":"C%2B%2B%20API/Tile/#functions","title":"Functions","text":"Name Description isPlaced Check if it was placed or not. place Place the tile using a source AtlasTile and world coordinates. erase Erase the tile, no longer to be shown in-game. getAtlasTile Get the source AtlasTile that originates from the used TileSet. getWorldCoords Get the world coordinates, at which the Tile is placed."},{"location":"C%2B%2B%20API/Tile/#variable-details","title":"Variable Details","text":""},{"location":"C%2B%2B%20API/Tile/#atlastile","title":"atlasTile","text":"<p>AtlasTile atlasTile</p> <p>The Tile's source AtlasTile.</p>"},{"location":"C%2B%2B%20API/Tile/#placed","title":"placed","text":"<p>bool placed</p> <p>Whether this Tile is placed and will be drawn or not.</p>"},{"location":"C%2B%2B%20API/Tile/#worldcoords","title":"worldCoords","text":"<p>Vector2 worldCoords</p> <p>The Tile's World coordinates.</p>"},{"location":"C%2B%2B%20API/Tile/#function-details","title":"Function Details","text":""},{"location":"C%2B%2B%20API/Tile/#erase","title":"erase","text":"<p>void erase()</p> <p>Erase the tile, no longer to be shown in-game.</p>"},{"location":"C%2B%2B%20API/Tile/#getatlastile","title":"getAtlasTile","text":"<p>AtlasTile getAtlasTile()</p> <p>Get the source AtlasTile that originates from the used TileSet.</p> Return The source AtlasTile."},{"location":"C%2B%2B%20API/Tile/#getworldcoords","title":"getWorldCoords","text":"<p>Vector2 getWorldCoords()</p> <p>Get the world coordinates, at which the Tile is placed.</p> Return The world coordinates."},{"location":"C%2B%2B%20API/Tile/#isplaced","title":"isPlaced","text":"<p>bool isPlaced()</p> <p>Check if it was placed or not.</p>"},{"location":"C%2B%2B%20API/Tile/#place","title":"place","text":"<p>void place(AtlasTile atlasTile, Vector2 worldCoords)</p> <p>Place the tile using a source AtlasTile and world coordinates.</p> <code>atlasTile</code> The source atlas tile from a TileSet. <code>worldCoords</code> A Vector2, representing the coordinates on the world where it will be placed."},{"location":"C%2B%2B%20API/TileMap/","title":"TileMap","text":"<p>class TileMap</p> <p>A TileMap represents a map of the placed tiles in a Room.</p>"},{"location":"C%2B%2B%20API/TileMap/#variables","title":"Variables","text":"Name Description basePos Base position of this TileMap. tileSetSource File path to the source of the used TileSet. tileSet A unique_ptr to the used TileSet. width Width of the TileMap in tiles height Height of the TileMap in height tiles A collection representing the tiles in this map"},{"location":"C%2B%2B%20API/TileMap/#functions","title":"Functions","text":"Name Description TileMap Construct from a file name/path TileMap Construct using a TileSet path, width, height TileMap Constructor using a TileSet object TileMap Constructor using a unique_ptr of a TileSet TileMap Constructor using a RoomBin binary structure dumpJson Dump the TileMap's data into a nlohmann::json object unload Unload routine. update Update routine. draw Draw routine. getTileSetSource Get the path of the TileSet resource getTileSet Get a pointer to the used TileSet setTileSet Set a new TileSet for this TileMap using a path for the new TileSet getTile Get the Tile at the specified x and y position setTile Set the tile at the specified world position to be a tile at the specified atlas position from the TileSet setEmptyTile Set the tile at the specified world position to be empty (not drawn) drawTile Draw the tile at the specified world x and y coordinates getMaxWorldSize Get the size of this TileMap  Return :    the size in a Vector2. The x component is the width; the y component is the height. setWorldSize Set the size of this TileSet using the provided Vector2 argument."},{"location":"C%2B%2B%20API/TileMap/#variable-details","title":"Variable Details","text":""},{"location":"C%2B%2B%20API/TileMap/#basepos","title":"basePos","text":"<p>Vector2 basePos</p> <p>Base position of this TileMap.</p>"},{"location":"C%2B%2B%20API/TileMap/#height","title":"height","text":"<p>int height</p> <p>Height of the TileMap in height</p>"},{"location":"C%2B%2B%20API/TileMap/#tileset","title":"tileSet","text":"<p>std::unique_ptr&lt;TileSet&gt; tileSet</p> <p>A unique_ptr to the used TileSet.</p>"},{"location":"C%2B%2B%20API/TileMap/#tilesetsource","title":"tileSetSource","text":"<p>std::string tileSetSource</p> <p>File path to the source of the used TileSet.</p>"},{"location":"C%2B%2B%20API/TileMap/#tiles","title":"tiles","text":"<p>std::vector&lt;std::vector&lt;Tile&gt;&gt; tiles</p> <p>A collection representing the tiles in this map</p>"},{"location":"C%2B%2B%20API/TileMap/#width","title":"width","text":"<p>int width</p> <p>Width of the TileMap in tiles</p>"},{"location":"C%2B%2B%20API/TileMap/#function-details","title":"Function Details","text":""},{"location":"C%2B%2B%20API/TileMap/#tilemap_1","title":"TileMap","text":"<p>TileMap(std::string fileName)</p> <p>Construct from a file name/path</p> <p>TileMap(std::string tileSetSource, int width, int height, int atlasTileSize, int worldTileSize)</p> <p>Construct using a TileSet path, width, height</p> <p>TileMap(TileSet tileSet, int width, int height, int atlasTileSize, int worldTileSize)</p> <p>Constructor using a TileSet object</p> <p>TileMap(std::unique_ptr&lt;TileSet&gt; tileSetPtr, int width, int height, int atlasTileSize, int worldTileSize)</p> <p>Constructor using a unique_ptr of a TileSet</p> <p>TileMap(RoomBin bin)</p> <p>Constructor using a RoomBin binary structure</p>"},{"location":"C%2B%2B%20API/TileMap/#draw","title":"draw","text":"<p>void draw()</p> <p>Draw routine.</p>"},{"location":"C%2B%2B%20API/TileMap/#drawtile","title":"drawTile","text":"<p>void drawTile(int x, int y)</p> <p>Draw the tile at the specified world x and y coordinates</p>"},{"location":"C%2B%2B%20API/TileMap/#dumpjson","title":"dumpJson","text":"<p>json dumpJson()</p> <p>Dump the TileMap's data into a nlohmann::json object</p>"},{"location":"C%2B%2B%20API/TileMap/#getmaxworldsize","title":"getMaxWorldSize","text":"<p>Vector2 getMaxWorldSize()</p> <p>Get the size of this TileMap</p> Return the size in a Vector2. The x component is the width; the y component is the height."},{"location":"C%2B%2B%20API/TileMap/#gettile","title":"getTile","text":"<p>Tile getTile(int x, int y)</p> <p>Get the Tile at the specified x and y position</p>"},{"location":"C%2B%2B%20API/TileMap/#gettileset","title":"getTileSet","text":"<p>TileSet* getTileSet()</p> <p>Get a pointer to the used TileSet</p>"},{"location":"C%2B%2B%20API/TileMap/#gettilesetsource","title":"getTileSetSource","text":"<p>std::string getTileSetSource()</p> <p>Get the path of the TileSet resource</p>"},{"location":"C%2B%2B%20API/TileMap/#setemptytile","title":"setEmptyTile","text":"<p>void setEmptyTile(Vector2 worldPos)</p> <p>Set the tile at the specified world position to be empty (not drawn)</p>"},{"location":"C%2B%2B%20API/TileMap/#settile","title":"setTile","text":"<p>void setTile(Vector2 worldPos, Vector2 atlasPos)</p> <p>Set the tile at the specified world position to be a tile at the specified atlas position from the TileSet</p>"},{"location":"C%2B%2B%20API/TileMap/#settileset","title":"setTileSet","text":"<p>void setTileSet(std::string tileSetSource)</p> <p>Set a new TileSet for this TileMap using a path for the new TileSet</p>"},{"location":"C%2B%2B%20API/TileMap/#setworldsize","title":"setWorldSize","text":"<p>void setWorldSize(Vector2 size)</p> <p>Set the size of this TileSet using the provided Vector2 argument. The x ocmponent will be the new width; the y component will be the new height.</p>"},{"location":"C%2B%2B%20API/TileMap/#unload","title":"unload","text":"<p>void unload()</p> <p>Unload routine. Typically calls raylib's UnloadTexture.</p>"},{"location":"C%2B%2B%20API/TileMap/#update","title":"update","text":"<p>void update()</p> <p>Update routine.</p>"},{"location":"C%2B%2B%20API/TileSet/","title":"TileSet","text":"<p>class TileSet</p> <p>The TileSet class represents a collection of tiles that can be used for a TileMap or another object</p> See TileMap"},{"location":"C%2B%2B%20API/TileSet/#variables","title":"Variables","text":"Name Description texture The used Texture for this TileSet. tileSize The size of a single file. textureSource The path to the used texture."},{"location":"C%2B%2B%20API/TileSet/#functions","title":"Functions","text":"Name Description TileSet Constructor that takes the path to the .rtiles file TileSet Constructor that takes the path of the texture (image file) and a Vector2 that represents the tile size TileSet Like TileSet(std::string textureSource, Vector2 tileSize), but takes an int for tile size with identical width and height (square tiles) TileSet Constructor that takes the TileSetBin binary structure dumpJson Dump the TileSet's data into a nlohmann::json object unload Unload routine getTileSize Get the size of a tile. setTileSize Set the tile size to an integer value. setTileSizeVector Set the tile size to a Vector2 value. getTexture Get the texture of this TileSet. getTextureSource Get the path to the texture image file. setTextureSource Set the TileSet's texture source image. areAtlasCoordsValid Check whether the given coordinates are valid getTile Get a tile from this TileSet as an AtlasTile."},{"location":"C%2B%2B%20API/TileSet/#variable-details","title":"Variable Details","text":""},{"location":"C%2B%2B%20API/TileSet/#texture","title":"texture","text":"<p>Texture texture</p> <p>The used Texture for this TileSet. A raylib Texture is used.</p>"},{"location":"C%2B%2B%20API/TileSet/#texturesource","title":"textureSource","text":"<p>std::string textureSource</p> <p>The path to the used texture. May be a .png file or other image format.</p>"},{"location":"C%2B%2B%20API/TileSet/#tilesize","title":"tileSize","text":"<p>Vector2 tileSize</p> <p>The size of a single file. TIles can have different widths and heights, thus a Vector2 is used.</p>"},{"location":"C%2B%2B%20API/TileSet/#function-details","title":"Function Details","text":""},{"location":"C%2B%2B%20API/TileSet/#tileset_1","title":"TileSet","text":"<p>TileSet(std::string fileName)</p> <p>Constructor that takes the path to the .rtiles file</p> <p>TileSet(std::string textureSource, Vector2 tileSize)</p> <p>Constructor that takes the path of the texture (image file) and a Vector2 that represents the tile size</p> <p>TileSet(std::string textureSource, int tileSizeInt)</p> <p>Like TileSet(std::string textureSource, Vector2 tileSize), but takes an int for tile size with identical width and height (square tiles)</p> <p>TileSet(TileSetBin bin)</p> <p>Constructor that takes the TileSetBin binary structure</p>"},{"location":"C%2B%2B%20API/TileSet/#areatlascoordsvalid","title":"areAtlasCoordsValid","text":"<p>bool areAtlasCoordsValid(Vector2 atlasCoords)</p> <p>Check whether the given coordinates are valid</p>"},{"location":"C%2B%2B%20API/TileSet/#dumpjson","title":"dumpJson","text":"<p>json dumpJson()</p> <p>Dump the TileSet's data into a nlohmann::json object</p>"},{"location":"C%2B%2B%20API/TileSet/#gettexture","title":"getTexture","text":"<p>Texture getTexture()</p> <p>Get the texture of this TileSet.</p> Return A raylib Texture."},{"location":"C%2B%2B%20API/TileSet/#gettexturesource","title":"getTextureSource","text":"<p>std::string getTextureSource()</p> <p>Get the path to the texture image file.</p>"},{"location":"C%2B%2B%20API/TileSet/#gettile","title":"getTile","text":"<p>AtlasTile getTile(Vector2 atlasCoords)</p> <p>Get a tile from this TileSet as an AtlasTile.</p>"},{"location":"C%2B%2B%20API/TileSet/#gettilesize","title":"getTileSize","text":"<p>Vector2 getTileSize()</p> <p>Get the size of a tile. Since a tile may have different width and height, it returns a Vector2</p>"},{"location":"C%2B%2B%20API/TileSet/#settexturesource","title":"setTextureSource","text":"<p>void setTextureSource(std::string source)</p> <p>Set the TileSet's texture source image.</p>"},{"location":"C%2B%2B%20API/TileSet/#settilesize","title":"setTileSize","text":"<p>void setTileSize(int size)</p> <p>Set the tile size to an integer value. Both width and height will be this value.</p>"},{"location":"C%2B%2B%20API/TileSet/#settilesizevector","title":"setTileSizeVector","text":"<p>void setTileSizeVector(Vector2 vec)</p> <p>Set the tile size to a Vector2 value. The x component is taken for width; the y component is taken for height.</p>"},{"location":"C%2B%2B%20API/TileSet/#unload","title":"unload","text":"<p>void unload()</p> <p>Unload routine</p>"}]}